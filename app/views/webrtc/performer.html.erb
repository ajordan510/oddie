<div id="container">
    <br/>
    <h2 class="webrtc_title"> Performer Page </h2>
    <h3 class="browser_warning">Add in a browswer detection and alert if it is not webRTC compatible</h3>
    <br/>
    <div class="setup-panel">                
        <section>
            <div id="option-container" style="visibility: hidden; display:none">
                <select id="broadcasting-option">
                    <option>Audio + Video</option>
                    <option>Only Audio</option>
                    <option>Screen</option>
                </select>
            </div>
            <br/>
            <input type="text" id="broadcast-name" placeholder="Choose Broadcast Name"/>
            <br/>
            <br/>


        </section>                
        <table style="width: 100%;" id="rooms-list">
            <!-- list of all available broadcasting rooms -->
        </table>
        <div id="videos-container">
            <video id="video-html" muted poster='<%=image_path('video-play.jpg')%>'> </video>
        </div>

        <button id="setup-new-broadcast" class="setup, myButton">
            Begin Broadcast
        </button>

    </div>
        
    <script>
        var config = {
            openSocket: function(config) {
                var channel = config.channel || location.href.replace( /\/|:|#|%|\.|\[|\]/g , '');
                var socket = new Firebase('https://chat.firebaseIO.com/' + channel);
                socket.channel = channel;
                socket.on("child_added", function(data) {
                        config.onmessage && config.onmessage(data.val());
                });
                socket.send = function(data) {
                            this.push(data);
                };
                config.onopen && setTimeout(config.onopen, 1);
                socket.onDisconnect().remove();
                return socket;
            },
            onRemoteStream: function(htmlElement) {
                htmlElement.setAttribute('controls', true);
                var videoElement = document.getElementById('video-html')
                
                htmlElement.play();
                rotateInCircle(htmlElement);
            },
            onRoomFound: function(room) {
                var alreadyExist = document.querySelector('button[data-broadcaster="' + room.broadcaster + '"]');
                if (alreadyExist) return;
                if (typeof roomsList === 'undefined') roomsList = document.body;
                var tr = document.createElement('tr');
                tr.innerHTML = '<td><strong>' + room.roomName + '<td><button class="join">Join</button></td>';
                roomsList.insertBefore(tr, roomsList.firstChild);
                var joinRoomButton = tr.querySelector('.join');
                joinRoomButton.setAttribute('data-broadcaster', room.broadcaster);
                joinRoomButton.setAttribute('data-roomToken', room.broadcaster);
                
                joinRoomButton.onclick = function() {
                    this.disabled = true;
                    var broadcaster = this.getAttribute('data-broadcaster');
                    var roomToken = this.getAttribute('data-roomToken');
                    broadcastUI.joinRoom({
                        roomToken: roomToken,
                        joinUser: broadcaster
                    });
                    hideUnnecessaryStuff();
                };
            },
            onNewParticipant: function(numberOfViewers) {
                document.title = 'Viewers: ' + numberOfViewers;
            }
        };

        function setupNewBroadcastButtonClickHandler() {
            document.getElementById('broadcast-name').disabled = true;
            document.getElementById('setup-new-broadcast').disabled = true;

            captureUserMedia(function() {
                var shared = 'video';
                if (window.option == 'Only Audio') {
                    shared = 'audio';
                }
                if (window.option == 'Screen') {
                    shared = 'screen';
                }
                        
                broadcastUI.createRoom({
                    roomName: (document.getElementById('broadcast-name') || { }).value || 'Anonymous',
                    isAudio: shared === 'audio'
                });
            });

            hideUnnecessaryStuff();
        }

        function captureUserMedia(callback) {
            var constraints = null;
            window.option = broadcastingOption ? broadcastingOption.value : '';
            if (option === 'Only Audio') {
                constraints = {
                    audio: true,
                    video: false
                };
                        
                if(!DetectRTC.hasMicrophone) {
                    alert('DetectRTC library is unable to find microphone; maybe you denied microphone access once and it is still denied or maybe microphone device is not attached to your system or another app is using same microphone.');
                }
            }
            if (option === 'Screen') {
                var video_constraints = {
                    mandatory: {
                        chromeMediaSource: 'screen'
                    },
                    optional: []
                };
                constraints = {
                    audio: false,
                    video: video_constraints
                };
                        
                if(!DetectRTC.isScreenCapturingSupported) {
                   alert('DetectRTC library is unable to find screen capturing support. You MUST run chrome with command line flag "chrome --enable-usermedia-screen-capturing"');
                }
            }
                    
            if (option != 'Only Audio' && option != 'Screen' && !DetectRTC.hasWebcam) {
                alert('DetectRTC library is unable to find webcam; maybe you denied webcam access once and it is still denied or maybe webcam device is not attached to your system or another app is using same webcam.');
            }
//MESSING WITH RIGHT HERE!!!!
            //change the htmlElement to be the video that is already setup --> remove the only audio option
            
            //var htmlElement = document.createElement(option === 'Only Audio' ? 'audio' : 'video');
            var htmlElement = document.getElementById('video-html')
            //htmlElement.setAttribute('autoplay', true);
            //htmlElement.setAttribute('controls', true);
            //htmlElement.setAttribute('muted', 'muted');
            //videosContainer.insertBefore(htmlElement, videosContainer.firstChild);

            var mediaConfig = {
                video: htmlElement,
                onsuccess: function(stream) {
                    config.attachStream = stream;
                    callback && callback();

                    htmlElement.setAttribute('muted', true);
                    rotateInCircle(htmlElement);
                },
                onerror: function() {
                    if (option === 'Only Audio') alert('unable to get access to your microphone');
                    else if (option === 'Screen') {
                        if (location.protocol === 'http:') alert('Please test this WebRTC experiment on HTTPS.');
                        else alert('Screen capturing is either denied or not supported. Are you enabled flag: "Enable screen capture support in getUserMedia"?');
                    } else alert('unable to get access to your webcam');
                }
            };

            if (constraints) mediaConfig.constraints = constraints;
            getUserMedia(mediaConfig);
        }


        var broadcastUI = broadcast(config);

        /* UI specific */
        var videosContainer = document.getElementById('videos-container') || document.body;
        var setupNewBroadcast = document.getElementById('setup-new-broadcast');
        var roomsList = document.getElementById('rooms-list');  //sections where all the currently availble rooms are listed
//CHANGED BELOW TO ALWAYS BE A VIDEO
        var broadcastingOption = document.getElementById('broadcasting-option');  // (Audio, Audio+Video)

        if (setupNewBroadcast) setupNewBroadcast.onclick = setupNewBroadcastButtonClickHandler;

        function hideUnnecessaryStuff() {
            var visibleElements = document.getElementsByClassName('visible'),
                length = visibleElements.length;
            for (var i = 0; i < length; i++) {
                visibleElements[i].style.display = 'none';
            }
        }

        function rotateInCircle(video) {
            video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';
            setTimeout(function() {
                video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';
            }, 1000);
        }

    </script>
            
            <div class="experiment">
                <h4 class="header">How it works?</h4>
                <ol>
                    <li>Choose whether you would like to broadcast audio or audio+video</li>
                    <li>Peers will be able to view/watch/listen anonymously</li>
                    <li>There is not timer - but viewers will be dropped if you close out your browser or lose connection </li>
                    <li>.....change this section to include instructions about what the performer needs to do...</li>            
                </ol>
            </div>
        
</div>